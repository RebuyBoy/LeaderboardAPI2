//TODO cross origin
//builders
//date one rule  exclude or include end
//Provider enum to entity?
//swagger annotation  -> placeholder example ..
//Builders validation??
//Randomize scheduler start time

public Map<Long, Integer> getMapWithBookingIdAndCountProduct() {
        return bookingRepository.findAll()
                .stream()
                .collect(Collectors.toMap(Booking::getId, booking -> booking.getProducts().size()));
    }


 //    private int daysPlayed;
 //    private BigDecimal averageRank;
 //    private BigDecimal pointsPerDay;
 //    private BigDecimal prizePerDay;




 //    private List<AggregatedResult> aggregate(List<Result> results) {
 //        Map<Stake, Map<Player, AggregatedResult>> aggregateMap = new HashMap<>();
 //
 //        results.forEach(result -> {
 //            Stake stake = result.getStake();
 //            if (aggregateMap.containsKey(stake)) {
 //                Map<Player, AggregatedResult> playerAggregateMap = aggregateMap.get(stake);
 //                Player player = result.getPlayer();
 //                if (playerAggregateMap.containsKey(player)) {
 //                    AggregatedResult aggregateResultDTO = playerAggregateMap.get(player);
 //                    aggregateResultDTO.setTotalPoints(aggregateResultDTO.getTotalPoints().add(result.getPoint()));
 //                    aggregateResultDTO.setTotalPrize(aggregateResultDTO.getTotalPrize().add(result.getPrize()));
 //                } else {
 //                    playerAggregateMap.put(
 //                            player,
 //                            new AggregatedResult.Builder()
 ////                                    .stake(new StakeResponse(result.getStake().getStakeEquivalent()))
 //                                    .player(new PlayerResponse.Builder()
 //                                            .name(player.getName())
 //                                            .country(player.getCountry())
 //                                            .build())
 //                                    .totalPoints(result.getPoint())
 //                                    .totalPrize(result.getPrize())
 //                                    .build());
 //                }
 //            } else {
 //                aggregateMap.put(stake, new HashMap<>());
 //            }
 //        });
 //
 //        List<AggregatedResult> resultDTOS = new ArrayList<>();
 //        for (Map<Player, AggregatedResult> value : aggregateMap.values()) {
 //            resultDTOS.addAll(value.values());
 //        }
 //        resultDTOS.sort(Collections.reverseOrder());
 //        return resultDTOS;
 //    }